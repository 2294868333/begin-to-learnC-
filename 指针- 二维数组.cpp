/* **********************************************************************************************************
						指针与数组
作用：利用指针访问数组中元素
指针与二维数组
同一维数组一样，二维数组的数组名也可以表示该二维数组的起始地址

int *p;
p = a = &a[0](表示二维数组的首地址 也可以表示第0行的首地址)
p = a+1 = &a[1]（表示第一行的首地址）
...
p = a+i = &a[i]（表示第i行的首地址）

列数是在行地址的基础上加上相应的值
&a[0][0] = a[0]+0  = *a+0  （*a和a[0]都表示元素a[0][0]的地址）
&a[0][1] = a[0]+1  = *a+1 
&a[1][0] = a[1]+0  = *(a+1)+0
...
&a[0][i] = a[0]+i  = *a+i
&a[i][0] = a[i]+0  = *(a+i)+0
...
&a[i][j] = a[i]+j  = *(a+i)+j

如果想要取得相应地址所指向的元素的内容，需要在最外面加上括号并加上取内容运算符“*”
a[i][j] = *(*(a+i)+j)
********************************************************************************************************** */
//用指向元素的指针变量生成一个由自然数1~25组成的5*5方阵，并输出
#include <iostream>
using namespace std;
int main()
{
	//指针方法输出二维数组
	int a[5][5],*p = *a;
	for (int i = 1; p < *a + 25; p++)
	{
		*p = i++;
		cout << *p<<"	";
		if ((i - 1) % 5 == 0)
		{
			cout << endl;
		}
	}
	cout << endl;
	//正常二维数组输出方式
	for (int i = 0; i < 5; i++)
	{
		for (int j = 0; j < 5; j++)
		{
			cout << a[i][j] << "	";

		}
		cout << endl;
	}
	system("pause");
	return 0;

}
